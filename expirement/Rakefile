# TODO pull "exp_described.yml" to constant variable 
#

#
# For loading yaml parameter files
require 'yaml'

# Remotely Execute a command using slurm scheduler.
def rSh(name, command, slurm_hash)
	salloc_commands = "" 

	slurm_hash.each do |arg,val|
		salloc_commands << "--#{arg.to_s} #{val} "
	end

	myCommand = "salloc -J #{name} #{salloc_commands} \
srun #{command}"

	# Run Command
	sh   myCommand
end


task :test do |t|
	rSh "index", "aeou", :mem=>"100m", :foo=>"bar"
end

#Genome class

class Genome 
	include Rake::DSL

	attr_reader :name, :yml
	def initialize(name)
		# Checks to make sure genome exists
		#
		@name       = name 

		unless File.exist? ( "genomes/#{name}.yml" )
			raise "Genome Does not exist"
		end 

		@yml = YAML.load_file( yml_file )

		@master_task= "genome_#{name}"

		rules
	end

	# Genome Prefix
	def pre
		"genomes/#{@name}" 
	end

	# Genome YML File
	def yml_file
		"genomes/#{@name}.yml"
	end

	# Genome Directory (redundent?)
	def dir
		"#{pre}/"
	end

	# Genome Fasta File (uncompressed)
	def fa_file
		"#{pre}/genome.fa"       #Genome fasta location
	end

	# Transcript GTF File (uncomressed)
	def gtf_file
		"#{pre}/transcripts.gtf"
	end

	# Bowtie Index Directory
	def idx_dir
		"#{pre}/genome_idx/"    #Bowtie2 Index for Genome
	end

	# Bowtie Index Log File
	def idx_log_file
		"#{pre}/genome_idx/log"  #Bowtie2 Index Log
	end
	
	# Bowtie Prefix
	def bowtie_pre
		"#{pre}/genome_idx/p"    #Bowtie2 Genome Pre
	end

	def rules
		desc "Create genome directory"
		directory dir

		desc "Download Genome #{@name} Fasta"
		file fa_file => [yml_file, dir]  do |t|
			genome_fasta_url = yml["genome_fasta"]

			unzip = File.extname(genome_fasta_url) == ".gz" ? "| gunzip -c" : "" 

			sh "wget -O - #{genome_fasta_url} #{unzip} > #{fa_file}"
		end

		desc "Download Genome #{@name} GTF"
		file gtf_file => [yml_file, dir] do |t|

			genome_gtf_url = yml["transcript_gtf"]

			#splice additional command to zip if it's zipped 
			unzip = File.extname(genome_gtf_url) == ".gz" ? "| gunzip -c" : "" 
			sh "wget -O - #{genome_gtf_url} #{unzip} > #{gtf_file}"
		end

		desc "Create Genome Idx Dir"
		directory idx_dir

		desc "Index the genome using Bowtie 2"
		file idx_log_file => [fa_file, idx_dir] do |t| 

			rSh "bowtie2-build", "bowtie2-build #{fa_file} #{idx_dir}p > #{idx_log}", :mem=>"8000m"

		end

		task "genome_#{name}" => [idx_log_file, gtf_file]
	end
end

Genome.new("ZV9")

=begin
# Download samples from FTP server
class FTPDownloader	< HardLink

	include Rake::DSL
	

	def initialize (root_dir, hs)
		
		@root_dir = root_dir
		@username = hs['username'] ? if hs.key_exists? "username"
		@password = hs['password'] ? if hs.key_exists? "password"
	end

	def hostname
		URI.parse(@root_dir).host
	end

	def get_file_rule (filename, output_file)

		rule output_file do
			Net::FTP.open(hostname, user = @username, password = @password) do |ftp|
				ftp.getbinaryfile("#{@rootdir}/#{@filename}", output_file)
			end
		end
	end

end

class HardLink

	def initialize (root_dir) 
		@root_dir = root_dir
	end

	def get_file_rule (filename, output_file)
		File::link("#{root_dir}/#{filename}", output_file}
	end

end

=end

class Expirement

	include Rake::DSL
	attr_reader :name, :yml

	def initialize(expirement_name)

		@name = expirement_name
		@yml = YAML.load_file yml_file

		directory sample_dir

		@conditions = @yml['conditions'].map do |c|
			Condition.new(self, c)
		end

		samplesheet_rule

	end
	
	# directory where samples live
	def sample_dir
		"#{@dir}/samples"
	end

	# expirement directory
	def dir
		"expirements/#{@name}"

	end

	# expirement yml file
	def yml_file
		"#{dir}/exp_described.yml"
	end

	# filepath to cufflinks sampleheet
	def samplesheet_file
		"#{dir}/samplesheet"

	end

	def samplesheet_rule
		desc "Generate Expirement Sample Sheet"
		file samplesheet_file => yml_file do 
			File.open(samplesheet_file, 'w') { |file| 
				samples.each do |s|
					file.write "#{s.alignment_file}\t#{s.condition.name}\n"
				end
			}
		end
	end

	def samples 
		@conditions.flat_map { |c| c.samples }
	end

end

class Condition
	include Rake::DSL
	attr_reader :dir, :replicates, :name

	def initialize(expirement,condition_yml)
		@expirement = expirement
		@name = condition_yml['name']

		# Create Rule for condtion_dir
		directory dir

		@replicates = condition_yml['replicates'].map do |r|
			Sample.new(@expirement,self,r)
		end

	end

	def dir
		"#{@expirement.sample_dir}/#{@name}"
	end



	def samples
		@replicates
	end

end

class Sample
	include Rake::DSL
	attr_reader :id, :condition

	def initialize(expirement, condition, desc_hash)
		@expirement = expirement
		@condition = condition
		@id        = desc_hash['id']
		@r1_samples = desc_hash['r1'] 
		@r2_samples = desc_hash['r2'] if desc_hash.key? 'r2'

		# Create Rule for sample dir
		directory dir
	end

	def dir
		"#{condition.dir}/#{@id}"
	end

	def alignment_file
		"#{dir}/accepted_hits.bam"
	end

	def paired?
		@r2_samples.nil?
	end

	# TODO
	def download_rule
			

	end

	def input_files
		return ["r1.fq.gz", "r2.fq.gz"] if paired?
		["r1.fq.gz"]
	end

	def to_s 
		"#{@expirement.name}_#{@condition.name}_#{@id}"
	end

end

Expirement.new("brain_mehg")

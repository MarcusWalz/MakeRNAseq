# For loading yaml parameter files
require 'yaml'

# Remotely Execute a command using slurm.
def rSh(name, command, slurm_hash)
	salloc_commands = "" 

	slurm_hash.each do |arg,val|
		salloc_commands << "--#{arg.to_s} #{val} "
	end

	myCommand = "salloc -J #{name} #{salloc_commands} \
srun \"#{command}\""

	puts myCommand
	# sh myCommand
end


task :test do |t|
	rSh "index", "aeou", :mem=>"100m", :foo=>"bar"
end

#Genome class

class Genome 
	attr_reader :name, :yml_file, :pre, :dir, :fa, :gtf, :idx_dir, :idx_log, :bowtie_pre, :yml
	def initialize(name)
		# Checks to make sure genome exists
		#
		@name       = name 
		@yml_file   = "genomes/#{@name}.yml"             #Genome Yml

		unless File.exist? ( "genomes/#{name}.yml" )
			raise "Genome Does not exist"
		end 

		@pre        = "genomes/#{@name}" 
		@dir        = "#{@pre}/"                #Genome Directory
		@fa         = "#{@pre}/genome.fa"       #Genome fasta location
		@gtf        = "#{@pre}/transcripts.gtf" #Transcript gtf location
		@idx_dir    = "#{@pre}/genome_idx/"     #Bowtie2 Index for Genome
		@idx_log    = "#{@pre}/genome_idx/log"  #Bowtie2 Index Log
		@bowtie_pre = "#{@pre}/genome_idx/p"    #Bowtie2 Genome Pre
		@yml        = YAML.load_file( @yml_file)
	end
end

# Genome Rules
genome_ymls=FileList.new("genomes/*.yml")

genome_ymls.each do |genome_yml| 

	genome_name    = File.basename genome_yml, ".yml" 
	g = Genome.new genome_name

	# Create genome directory
	file g.dir do |t|
		Dir.mkdir( g.dir ) unless Dir.exists?( t.name )
	end

	# Download fasta from yml param "genome_fasta"
	file g.fa => [g.yml_file,g.dir] do |t|

		genome_fasta_url = g.yml["genome_fasta"]

		#splice additional command to zip if it's zipped 
		unzip = File.extname(genome_fasta_url) == ".gz" ? "| gunzip -c" : "" 

		sh "wget -O - #{genome_fasta_url} #{unzip} > #{t.name}"
	end

	# Download transcripts from yml param "transcript_gtf"
	file g.gtf => [g.yml,g.dir] do |t|
		genome_gtf_url = g.yml["transcript_gtf"]

		#splice additional command to zip if it's zipped 
		unzip = File.extname(genome_gtf_url) == ".gz" ? "| gunzip -c" : "" 
		sh "wget -O - #{genome_gtf_url} #{unzip} > #{t.name}"
	end

	# Index the genome via bowtie2
	file g.idx_log => g.fa do |t|

		# Create the parent directory if does not already exist
		parent_dir = File.expand_path "..", t.name
		puts parent_dir

		Dir.mkdir( parent_dir ) unless Dir.exists?( parent_dir)
		idx_prefix = "#{parent_dir}p"

		rSh "bowtie2-build", "bowtie2-build #{t.source} #{idx_prefix} > #{t.name}", :mem=>8000
	end

	# Do everything genome related
	task "build_genome_#{g.name}" => [g.idx_log, g.gtf, g.fa] 

end

expirement_dirs=FileList.new("expirements/*")

expirement_dirs.each do |exp_dir| 

	exp_name = File.basename exp_dir

	# Load Expirement YAML
	exp_yml_file = "#{exp_dir}/exp_described.yml"

	# Make Sure Descriptor File Exists
	exp_desc = YAML.load_file exp_yml_file

	task "build_#{exp_name}_skeleton" => exp_yml_file do |t|
		sample_dir = "#{exp_dir}/samples"
		Dir.mkdir ( sample_dir ) unless Dir.exists?( sample_dir )

		# Condition Directory
		exp_desc['conditions'].each do |c| 
			cond_dir = "#{sample_dir}/#{c['name']}"
			Dir.mkdir ( cond_dir ) unless Dir.exists? ( cond_dir )

			# Relicate Directory
			c['replicates'].each do |rep| 
				rep_dir = "#{cond_dir}/#{rep['id']}"
				Dir.mkdir ( rep_dir ) unless Dir.exists? ( rep_dir )

				# Link Data Files
				# TODO actually link files
			
				File.write "#{rep_dir}/r1.fq.gz", ""
				File.write("#{rep_dir}/r2.fq.gz","") if rep.key?("r2")

			end

		end

	end

	task "#{exp_dir}/sample_sheet" => exp_yml_file do t 
		File.open( t.name ) |file| do
			exp_desc['conditions'].each do |c| 
				c['replicates'].each do |rep| 


		end
	end

	

end

class Expirement

	def initialize (exp_described)
		

		@conditions 
	end
 
	# Expirements have many genomes
	class Condition
		def initialize (args)

		end
		
		# Conditions have many replicates
		class Replicate
			def initialize (args)

			end

		end

	end
end

	# Init using expirement_described.yml
	

	

end
